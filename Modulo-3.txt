Instalando o VSCode
    Apresentação do curso
    Instalação
    Recursos básicos
        Primeira aba, Explorer
        Na Lupa pode dar replace em todos os arquivos que você quiser
        COntrole de código fonte, faz integração com GitHub
        Executar e depurar códigos
        Extensões para o VSCode

        CTRL + Seta direita ou esquerda        // Consegue dar ou tirar tab
        Com ALT e clicando na tela, coloco cursores em vários lugares
        CTRL + P,           // Pesquisa de arquivos

    Extensões e temas
        Posso pesquisar e instalar novas Extensões, que mudam estética, até inspetores de código
        
    Terminal e Git
        Podemos usar o comando CODE, para abrir projetos

Introdução ao JavaScript
    Apresentação do curso
        Estefani, análise em desenvolvimento de sistemas
        Entender o que é JavaScript, sua saplicações na vida real e conhecer o Mercado de Trabalho
        Aula1: Oque é JavaScript
        Aula2: Recursos básicos
        Aula3: Console
        Aula4: Interação com Página HTML
        Aula5: Atividade Prática
        Aula6: Framework e mercado de Trabalho

    História, Evolução e aplicação
        Linguagem Interpretada, Está sendo rodada em tempo real, não precisou ser transformada em outra coisa
        Client-side, linguagem da web, estará ao lado do cliente, 
        Segue o Padrão ECMAScript, Padrão para várias linguagens

        Evolução:
        1995: Foi Criado
        1997: Primeira edição
        1998: 
        1999: Try/Catch
        2009: JSON Suporte, Array.isArray(), Array Iteration Methods

        Aplicações:
        * Web.                  É a linguagem da web
        * Mobile.               Podemos fazer com React Native
        * Smartwatches          Utilizando NodeJS, podemos criar Aplicações
        * Games
        * Internet of Things
        * APIs 

    Manipulando um arquivo
        // Maneira de comentar no JS
        /*
        Maneira de comentar várias linhas
        */
        CTRL + /                                            // COmenta automático
        Variaveis podem alterar o valor durante o código    // var
        constantes não podem                                // const

    Funções
        function soma () { }

    Console
        Executando um arquivo.js
            Console em uma página web
            Instalando NodeJS

    4. JavaScript em uma página da web
        Estrutura de projeto 
            Aprender a interagir com elementos HTML no DOM 
            Criando pasta assets, para confortar a pasta dos arquivos JS e CSS 

        Inserindo javascript numa página HTML
        Interagindo com os elementos do DOM


    6. Mercado de Trabalho
        Frameworks e bibliotecas
            VueJS
            React       // É uma biblioteca 
            Angular
            jQuery

            Plugamos no nosso código, facilitando o dia de codar,

    Sintaxe básica em JavaScript
        6. Funções e suas particularidades
        
    Variaveis e Tipos
        Variaveis
            Utilizar Camel Case para Variaveis
            Upper Case Snake Case utilizar para constantes

            var e let       // Valores dinâmicos
            let             // Escopo de bloco, Só funciona dentro do bloco declarado
            var             // Funciona a um escopo global

Funções
    1. Tipos de função
        function nome(parametro) { 
            // Instrução 
            return;
        }
        Função anoninma:                    // Não tem nome, esta atrelada a uma variavel
        const soma = function (a,b) {
            return a + b;
        }
    
    1. Função autoinvocável e Callbacks
        IIFE 
        (
            function() {
                let name = "Digital innovation One"
                return name;
            }
        )();
        Colocamos o bloco e função dentro de parentes
        
        Callbacks:
        Função passada como argumento para outra função

    2. Valores padrão e Objeto "arguments"
        function exponencial(array, num = 1) {              // Igualando num = 1, dizemos que, se não for passado nenhum parâmetro, por padrão será 1
            // Instrução
        }

        Objeto "arguments"
        Um array com todos os parâmetros passados quando a função foi invocada

    2. Arrays e Objetos
        Arrays: 
        Spread: Uma forma de lidar separadamente com os elementos de um array
        rest: Combina os elementos em um array
        Object Destructuring: Entre as {} Filtra apenas os dados que nos interessam em um objeto.

    5. Sintaxe e outras restrições
        Arrow function
            const helloWorld = () => "helloWorld";
            const soma = (a,b) => a + b;
            Sendo assim, não precisamos escrever return nem as chaves, só pode utilizar quando o código só tem 1 linha.

            This    // Sempre será da variavel global  

Debugging e Error Handling
    1. ECMAScript Error e Domexception
        ECMAScript: 
            Composto por
            * Mensagem
            * nome
            * linha
            * Call Stack
        
        Domexception:
            Excessão, ou erro do DOM
            
    2. Tratando Erros
        Throw, Try/Catch e FInally
            Throw
                Dentro de una funçao, ao invez de usar return, utilizo Throw, mostrando que é um erro.

            Try/Catch
                Com uma função, no bloco Try, verifica se por ex a String é Válida,
                Catch, vai pegar este erro
                e podemos tratar o erro, por Ex:
                Catch(e) {
                    console.log(e);
                }
                ou posso dar um throw, assim mostra a mensagem de erro

            FInally
                Instrução que será chamada independente de erro ou não

    3. Criando Erros
        O objeto Error
            new Error(message, fileName, lineNumber)
            // Podemos apresentar em um erro, mensagem, nome de um arquivo, e numero da linha
            // Comumente utilizado apenas message

            const meuErro = new Error("Mensagem Inválida");     // Armazenando o erro em uma variavel
            throw meuErro;                                      // Jogando na tela o erro

        Atividade Prática
            O objetivo é que a função receba um array e retorne ele caso o seu tamanho corresponda ao 
            número enviado como parâmetro na função
            * Crie uma função que recebe um array e um número
            * Realize as seguintes validações
                * Se os parâmetros não forem enviados, lance um erro o tipo ReferenceError
                * Se o array não for do tipo 'object', lance um erro do tipo TypeError
                * Se o número não for do tipo 'number', lance um erro do tipo TypeError
                * Se o tamanho do array for diferente do número enviado como parâmetro, lance um erro do tipo RangeError
            * Utilize a declaração try...Catch
            * Filtre as chamadas de catch por cada tipo de erro utilizando o operador instanceof

    1. Assincronicidade
        Definições, Promises e Async/Await
            Definição: Assincrono, é algo que não ocorre ou não se efetiva ao mesmo tempo
            Promises: Objecto de proesssamento assíncrono
                Inicialmente, seu valor é desconhecido. Ela pode, então, ser resolvida ou rejeitada.
                Seu ingresso é uma promessa, quando chegar a data, você irá executar o seu ingresso, ou não.
                tem 3 estados
                    Pending, FUlfilled, Rejected
                Estrutura:
                const myPromise = new Promise((resolve, reject) => {        // Será resolvida após 2 mil segundos
                    window.setTimeout(() => {
                        resolve(console.log("Resolvida!"));
                    }, 2000);
                });
            Async/Await
                Funções assincronas precisam dessas duas palavras chave.
                Palavra Await vai parar todo o código, para poder resolver o código assincrono

    2. Consumindo APIs
        O que sao APIs e Fetch
            Application Programing Interface
                Forma de intermediar os resultados do Back-End no Front-End
                JSON é comum que APIs retornem seus dados no formato .json, portanto precisamos tratar esses dados quando os recebermos
            Fetch
                Vai receber URL e algumas opções que vamos passar para ele
                fetch vai retornar uma promisse, podemos usar .then
                Precisamos usar await quando formos usar o Fetch
        Atividades práticas
            Página que carrega fotos aleatórias de gatinhos
                Nesta atividade, vamos criar uma página que carrega fotos aleatórias de gatinhos sempre que clicamos em um botão.

                Utilize a API https://thatcopy.pw/catapi/rest para fazer as chamadas com o método fetch();
                Utilize seus conhecimentos na manipulação do DOM para criar a imagem e ativar o evento de clique do botão!

    Orientação a Objetos
        1. Compreendendo Orientação a Objetos
            Paradigmas da programação
                Imperative: Foca em como vai resolver problemas
                    Ex: Banco de dados SQL
                Declarativo:    Oque vai fazer
                Pilares 
                    Herança         O objeto filho herda propriedades e métodos do objeto pai.
                    Polimorfismo    Abstração, podemos herdar a mesma classe pai, mas se comportarem de forma diferente quando invocamos seus métodos
                    Encapsulamento  Cada classe tem propriedades e métodos independente do restante do código
                    Abstração       Simplificar e generalizar cada vez mais
        2. Orientação a objetos em JavaScript
            Protótipos e Classes
                Protótipos
                    Basicamente um esqueleto de todos os objetos (prototype)
                    Qualquer tipo de herança é utilizada com Protótipos
                    Método super(): Serve para utilizarmos o construtor da classe pai
            Atividade práticas
                Nesta atividade, vamos testar os conceitos de Orientação a Objetos simulando a criação de diversos tipos de contas bancárias e
                operações disponíveis em cada uma.
                
                    Crie a classe ContaBancaria, que possui os parâmetros agencia, numero, tipo e saldo;
                    Dentro de ContaBancaria, construa o getter e o setter de saldo;
                    Dentro de ContaBancaria, crie os métodos sacar e depositar;
                    Crie uma classe-filha chamada ContaCorrente que herda todos esses parâmetros e ainda possua o parâmetro cartaoCredito;
                    Ainda em ContaCorrente, construa o getter e o setter de cartaoCredito;
                    Ainda em ContaCorrente, faça com que o tipo seja 'conta corrente' por padrão;
                    Crie uma classe-filha chamada ContaPoupanca que herda todos os parâmetros de ContaBancaria;
                    Crie uma classe-filha chamada ContaUniversitaria que herda todos os parâmetros de ContaBancaria;
                    Faça com que o método saque de ContaUniversitaria apenas seja capaz de sacar valores menores que 500 reais.

    Manipulando a D.O.M com JavaScript
        1. Entendendo o D.O.M
            DOM: DOcument Object Model
                padrão de como acessa e modifica os elementos de uma página HTML
            DOM vs BOM
                BOM: Browser Object Model
                    Tudo o que está dentro do Objeto window (Janela do navegador)
                    Dentro do BOM, esta o DOM.

        2. Selecionando elementos
            Métodos
                Página HTML é feita com uma série de tags 
                id: algo único na página HTML, não pode se repetir
                class: pode se usar várias vezes
                Selecionando os elementos
                    document.getElementById("Titulo");                              // Irei importar a tag que tem o id Titulo
                    document.getElementsByTagName('li');                            // Irei importar as tags que tem li
                    document.getElementsByClassName("textos");                      // Irei importar todas as tags com classe textos
                    document.querySelectorAll(".primeira-classe .segunda-classe);   // Busca personalizada, buscando estas duas Classes
                Adicionar e deletar métodos
                    document.createElement(element);                                // Cria um novo elemento HTML
                    document.removeChild(element);                                  // Remove um elemento, do elemento pai informado
                    document.appendChild(element);                                  // Adiciona um elemento, do elemento pai informado
                    document.replaceCHild(new, old);                                // Substitui um elemento, do elemento pai informado

        3. Trabalhando com estilos
            const meuElemento = document.getElementById("meu-eleento")              

            meuElemento.classList.add("novo-estilo");                               // Adiciona a classe "meu-estilo"
            meuElemento.classList.remove("classe");                                 // Remove a classe "classe"
            meuElemento.classList.toggle("dar-mode");                               // Adiciona a classe "Dark-mode" caso ela não faça parte
                                                                                    // da lista e remove ela caso faça.
            Colocando Estilo CSS de um elemento
                document.getElementsByTagName("p").style.color = "blue";            // Seleciona todos os parágrafos, e coloca o stylo como azul
                