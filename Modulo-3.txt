Instalando o VSCode
    Apresentação do curso
    Instalação
    Recursos básicos
        Primeira aba, Explorer
        Na Lupa pode dar replace em todos os arquivos que você quiser
        COntrole de código fonte, faz integração com GitHub
        Executar e depurar códigos
        Extensões para o VSCode

        CTRL + Seta direita ou esquerda        // Consegue dar ou tirar tab
        Com ALT e clicando na tela, coloco cursores em vários lugares
        CTRL + P,           // Pesquisa de arquivos

    Extensões e temas
        Posso pesquisar e instalar novas Extensões, que mudam estética, até inspetores de código
        
    Terminal e Git
        Podemos usar o comando CODE, para abrir projetos

Introdução ao JavaScript
    Apresentação do curso
        Estefani, análise em desenvolvimento de sistemas
        Entender o que é JavaScript, sua saplicações na vida real e conhecer o Mercado de Trabalho
        Aula1: Oque é JavaScript
        Aula2: Recursos básicos
        Aula3: Console
        Aula4: Interação com Página HTML
        Aula5: Atividade Prática
        Aula6: Framework e mercado de Trabalho

    História, Evolução e aplicação
        Linguagem Interpretada, Está sendo rodada em tempo real, não precisou ser transformada em outra coisa
        Client-side, linguagem da web, estará ao lado do cliente, 
        Segue o Padrão ECMAScript, Padrão para várias linguagens

        Evolução:
        1995: Foi Criado
        1997: Primeira edição
        1998: 
        1999: Try/Catch
        2009: JSON Suporte, Array.isArray(), Array Iteration Methods

        Aplicações:
        * Web.                  É a linguagem da web
        * Mobile.               Podemos fazer com React Native
        * Smartwatches          Utilizando NodeJS, podemos criar Aplicações
        * Games
        * Internet of Things
        * APIs 

    Manipulando um arquivo
        // Maneira de comentar no JS
        /*
        Maneira de comentar várias linhas
        */
        CTRL + /                                            // COmenta automático
        Variaveis podem alterar o valor durante o código    // var
        constantes não podem                                // const

    Funções
        function soma () { }

    Console
        Executando um arquivo.js
            Console em uma página web
            Instalando NodeJS

    4. JavaScript em uma página da web
        Estrutura de projeto 
            Aprender a interagir com elementos HTML no DOM 
            Criando pasta assets, para confortar a pasta dos arquivos JS e CSS 

        Inserindo javascript numa página HTML
        Interagindo com os elementos do DOM


    6. Mercado de Trabalho
        Frameworks e bibliotecas
            VueJS
            React       // É uma biblioteca 
            Angular
            jQuery

            Plugamos no nosso código, facilitando o dia de codar,

    Sintaxe básica em JavaScript
        6. Funções e suas particularidades
        
    Variaveis e Tipos
        Variaveis
            Utilizar Camel Case para Variaveis
            Upper Case Snake Case utilizar para constantes

            var e let       // Valores dinâmicos
            let             // Escopo de bloco, Só funciona dentro do bloco declarado
            var             // Funciona a um escopo global

Funções
    1. Tipos de função
        function nome(parametro) { 
            // Instrução 
            return;
        }
        Função anoninma:                    // Não tem nome, esta atrelada a uma variavel
        const soma = function (a,b) {
            return a + b;
        }
    
    1. Função autoinvocável e Callbacks
        IIFE 
        (
            function() {
                let name = "Digital innovation One"
                return name;
            }
        )();
        Colocamos o bloco e função dentro de parentes
        
        Callbacks:
        Função passada como argumento para outra função

    2. Valores padrão e Objeto "arguments"
        function exponencial(array, num = 1) {              // Igualando num = 1, dizemos que, se não for passado nenhum parâmetro, por padrão será 1
            // Instrução
        }

        Objeto "arguments"
        Um array com todos os parâmetros passados quando a função foi invocada

    2. Arrays e Objetos
        Arrays: 
        Spread: Uma forma de lidar separadamente com os elementos de um array
        rest: Combina os elementos em um array
        Object Destructuring: Entre as {} Filtra apenas os dados que nos interessam em um objeto.

    5. Sintaxe e outras restrições
        Arrow function
            const helloWorld = () => "helloWorld";
            const soma = (a,b) => a + b;
            Sendo assim, não precisamos escrever return nem as chaves, só pode utilizar quando o código só tem 1 linha.

            This    // Sempre será da variavel global  

Debugging e Error Handling
    1. ECMAScript Error e Domexception
        ECMAScript: 
            Composto por
            * Mensagem
            * nome
            * linha
            * Call Stack
        
        Domexception:
            Excessão, ou erro do DOM
            
    2. Tratando Erros
        Throw, Try/Catch e FInally
            Throw
                Dentro de una funçao, ao invez de usar return, utilizo Throw, mostrando que é um erro.

            Try/Catch
                Com uma função, no bloco Try, verifica se por ex a String é Válida,
                Catch, vai pegar este erro
                e podemos tratar o erro, por Ex:
                Catch(e) {
                    console.log(e);
                }
                ou posso dar um throw, assim mostra a mensagem de erro

            FInally
                Instrução que será chamada independente de erro ou não

    3. Criando Erros
        O objeto Error
            new Error(message, fileName, lineNumber)
            // Podemos apresentar em um erro, mensagem, nome de um arquivo, e numero da linha
            // Comumente utilizado apenas message

            const meuErro = new Error("Mensagem Inválida");     // Armazenando o erro em uma variavel
            throw meuErro;                                      // Jogando na tela o erro

        Atividade Prática
            O objetivo é que a função receba um array e retorne ele caso o seu tamanho corresponda ao 
            número enviado como parâmetro na função
            * Crie uma função que recebe um array e um número
            * Realize as seguintes validações
                * Se os parâmetros não forem enviados, lance um erro o tipo ReferenceError
                * Se o array não for do tipo 'object', lance um erro do tipo TypeError
                * Se o número não for do tipo 'number', lance um erro do tipo TypeError
                * Se o tamanho do array for diferente do número enviado como parâmetro, lance um erro do tipo RangeError
            * Utilize a declaração try...Catch
            * Filtre as chamadas de catch por cada tipo de erro utilizando o operador instanceof